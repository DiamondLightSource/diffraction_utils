"""
This module contains tests for the I07Diffractometer class. In particular, these
are tests that are ensuring that rotation matrices being generated by
I07Diffractometer instances are correct.
"""

import numpy as np
from numpy.testing import assert_allclose
from scipy.spatial.transform import Rotation

from diffraction_utils.frame_of_reference import Frame
from diffraction_utils.diffractometers.diamond_i07 import I07Diffractometer


def test_u_matrix_horizontal(i07_04_2022_diffractometer: I07Diffractometer):
    """
    Make sure that the u matrices generated by instances of I07Diffractometer in
    the horizontal setup are correct.
    """
    u_mat_0 = i07_04_2022_diffractometer.get_u_matrix(0)

    # Motor value read manually from .nxs file.
    chi = 0.45  # Note that theta and alpha were zeroed throughout scan.
    chi_axis = np.array([1, 0, 0])  # Chi acts about [-1, 0, 0]!

    inverse_chi_rot = Rotation.from_rotvec(chi*chi_axis, degrees=True)

    random_vec = np.random.random(3)

    assert_allclose(random_vec, (inverse_chi_rot*u_mat_0).apply(random_vec),
                    rtol=1e-4, atol=1e-4)


def test_detector_vector(i07_04_2022_diffractometer: I07Diffractometer):
    """
    Make sure that the detector vector is correct in the lab frame.
    """
    frame = Frame(Frame.lab, i07_04_2022_diffractometer, 0)

    det_vec = i07_04_2022_diffractometer.get_detector_vector(frame)

    # If everything is working, we can rotate this back to [0, 0, 1] with:
    delta = 0.9  # Note that gamma was nearly zeroed in this simple scan.
    delta_axis = np.array([1, 0, 0])  # Delta acts about [-1, 0, 0]!

    inverse_delta_rot = Rotation.from_rotvec(delta*delta_axis, degrees=True)

    # The poor absolute tolerance on this test comes from our finite gamma.
    assert_allclose(inverse_delta_rot.apply(det_vec.array), [0, 0, 1],
                    atol=4e-2)


def test_detector_vector_frame_change(
        i07_04_2022_diffractometer: I07Diffractometer):
    """
    Make sure that our detector vector is being properly generated in different
    frames when asked. This test exploits the fact that vector reference frame
    changes are thoroughly tested elsewhere.
    """
    # We know that the lab frame det_vec is good, so get that.
    frame1 = Frame(Frame.lab, i07_04_2022_diffractometer, 0)
    det_vec_1_lab = i07_04_2022_diffractometer.get_detector_vector(frame1)

    # Now get an hkl frame det_vec.
    frame2 = Frame(Frame.hkl, i07_04_2022_diffractometer, 0)
    det_vec_2_hkl = i07_04_2022_diffractometer.get_detector_vector(frame2)

    assert not np.allclose(det_vec_1_lab.array, det_vec_2_hkl.array)

    # Rotate first det_vec into hkl frame.
    i07_04_2022_diffractometer.rotate_vector_to_frame(det_vec_1_lab, frame2)

    # Now they should be roughly equal.
    assert np.allclose(det_vec_1_lab.array, det_vec_2_hkl.array)
